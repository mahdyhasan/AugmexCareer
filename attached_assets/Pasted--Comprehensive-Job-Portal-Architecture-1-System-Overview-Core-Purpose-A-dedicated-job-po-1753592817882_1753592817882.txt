# Comprehensive Job Portal Architecture

## 1. System Overview

### Core Purpose

A dedicated job portal for a software company that frequently hires, allowing:

- HR/Admin to post and manage job listings
- Candidates to browse jobs and submit applications
- Dynamic application forms per job type
- Resume upload and management
- Application tracking and evaluation

### Key Differentiators

- Company-specific (not a marketplace)
- Dynamic application forms based on job requirements
- Streamlined for frequent hiring cycles
- Integration-ready with existing HR systems

## 2. Database Schema (Supabase)

### Core Tables

#### `companies`

```sql
CREATE TABLE companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  website VARCHAR(255),
  logo_url VARCHAR(255),
  industry VARCHAR(100),
  size VARCHAR(50),
  location VARCHAR(255),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

#### `job_categories`

```sql
CREATE TABLE job_categories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  icon VARCHAR(50),
  created_at TIMESTAMP DEFAULT NOW()
);
```

#### `jobs`

```sql
CREATE TABLE jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES companies(id),
  category_id UUID REFERENCES job_categories(id),
  title VARCHAR(255) NOT NULL,
  slug VARCHAR(255) UNIQUE NOT NULL,
  description TEXT NOT NULL,
  requirements TEXT,
  responsibilities TEXT,
  benefits TEXT,
  employment_type VARCHAR(50) NOT NULL, -- full-time, part-time, contract, intern
  experience_level VARCHAR(50) NOT NULL, -- entry, mid, senior, lead, executive
  location VARCHAR(255),
  remote_type VARCHAR(50), -- on-site, remote, hybrid
  salary_min DECIMAL(10,2),
  salary_max DECIMAL(10,2),
  currency VARCHAR(3) DEFAULT 'USD',
  skills JSONB, -- Array of required skills
  application_deadline DATE,
  status VARCHAR(50) DEFAULT 'active', -- active, paused, closed, draft
  application_form_config JSONB, -- Dynamic form configuration
  created_by UUID REFERENCES auth.users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

#### `job_application_forms`

```sql
CREATE TABLE job_application_forms (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_id UUID REFERENCES jobs(id) ON DELETE CASCADE,
  form_config JSONB NOT NULL, -- Dynamic form structure
  version INTEGER DEFAULT 1,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW()
);
```

#### `applications`

```sql
CREATE TABLE applications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_id UUID REFERENCES jobs(id),
  candidate_email VARCHAR(255) NOT NULL,
  candidate_name VARCHAR(255) NOT NULL,
  candidate_phone VARCHAR(20),
  resume_url VARCHAR(255),
  cover_letter TEXT,
  application_data JSONB, -- Dynamic form responses
  status VARCHAR(50) DEFAULT 'submitted', -- submitted, reviewed, shortlisted, interviewed, rejected, hired
  applied_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

#### `application_status_history`

```sql
CREATE TABLE application_status_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  application_id UUID REFERENCES applications(id) ON DELETE CASCADE,
  previous_status VARCHAR(50),
  new_status VARCHAR(50) NOT NULL,
  notes TEXT,
  changed_by UUID REFERENCES auth.users(id),
  changed_at TIMESTAMP DEFAULT NOW()
);
```

#### `user_profiles`

```sql
CREATE TABLE user_profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  email VARCHAR(255) NOT NULL,
  full_name VARCHAR(255),
  role VARCHAR(50) DEFAULT 'candidate', -- admin, hr, recruiter, candidate
  company_id UUID REFERENCES companies(id),
  avatar_url VARCHAR(255),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

#### `saved_jobs`

```sql
CREATE TABLE saved_jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id),
  job_id UUID REFERENCES jobs(id),
  saved_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id, job_id)
);
```

#### `job_views`

```sql
CREATE TABLE job_views (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_id UUID REFERENCES jobs(id),
  user_id UUID REFERENCES auth.users(id) NULL, -- NULL for anonymous views
  ip_address INET,
  user_agent TEXT,
  viewed_at TIMESTAMP DEFAULT NOW()
);
```

## 3. System Architecture

### Frontend Architecture (Next.js/React)

#### Component Structure

```
src/
├── components/
│   ├── common/
│   │   ├── Header.tsx
│   │   ├── Footer.tsx
│   │   ├── LoadingSpinner.tsx
│   │   └── ErrorBoundary.tsx
│   ├── jobs/
│   │   ├── JobCard.tsx
│   │   ├── JobList.tsx
│   │   ├── JobDetail.tsx
│   │   ├── JobSearch.tsx
│   │   └── JobFilters.tsx
│   ├── applications/
│   │   ├── ApplicationForm.tsx
│   │   ├── DynamicFormBuilder.tsx
│   │   ├── ResumeUpload.tsx
│   │   └── ApplicationStatus.tsx
│   ├── admin/
│   │   ├── JobManagement.tsx
│   │   ├── ApplicationDashboard.tsx
│   │   ├── FormBuilder.tsx
│   │   └── Analytics.tsx
│   └── auth/
│       ├── LoginForm.tsx
│       ├── SignupForm.tsx
│       └── ProtectedRoute.tsx
├── pages/
│   ├── index.tsx (Job listings)
│   ├── jobs/
│   │   ├── [slug].tsx (Job detail)
│   │   └── category/[category].tsx
│   ├── apply/[jobId].tsx
│   ├── admin/
│   │   ├── dashboard.tsx
│   │   ├── jobs.tsx
│   │   └── applications.tsx
│   └── api/
│       ├── jobs/
│       ├── applications/
│       └── upload/
├── hooks/
│   ├── useJobs.ts
│   ├── useApplications.ts
│   ├── useAuth.ts
│   └── useSupabase.ts
├── utils/
│   ├── supabase.ts
│   ├── formValidation.ts
│   ├── fileUpload.ts
│   └── constants.ts
└── types/
    ├── job.ts
    ├── application.ts
    └── user.ts
```

#### Key Features Implementation

**Dynamic Form Builder**

```typescript
interface FormField {
  id: string;
  type: 'text' | 'email' | 'phone' | 'textarea' | 'select' | 'multiselect' | 'file' | 'checkbox' | 'radio';
  label: string;
  placeholder?: string;
  required: boolean;
  options?: string[]; // For select/radio fields
  validation?: {
    min?: number;
    max?: number;
    pattern?: string;
    fileTypes?: string[];
  };
}

interface JobApplicationFormConfig {
  fields: FormField[];
  submitText: string;
  successMessage: string;
}
```

### Backend Architecture

#### API Routes Structure

```
/api/
├── jobs/
│   ├── GET / (list jobs with filters)
│   ├── GET /:id (job details)
│   ├── POST / (create job - admin only)
│   ├── PUT /:id (update job - admin only)
│   └── DELETE /:id (delete job - admin only)
├── applications/
│   ├── POST / (submit application)
│   ├── GET / (list applications - admin only)
│   ├── GET /:id (application details - admin only)
│   └── PUT /:id/status (update status - admin only)
├── upload/
│   ├── POST /resume (upload resume)
│   └── POST /documents (upload other docs)
├── auth/
│   ├── POST /login
│   ├── POST /signup
│   └── POST /logout
└── admin/
    ├── GET /dashboard (analytics)
    ├── GET /jobs (job management)
    └── GET /applications (application management)
```

#### Authentication & Authorization

- **Supabase Auth** for user management
- **Row Level Security (RLS)** policies
- **Role-based access control** (Admin, HR, Candidate)

```sql
-- RLS Policies Example
CREATE POLICY "Public jobs are viewable by everyone" 
ON jobs FOR SELECT 
USING (status = 'active');

CREATE POLICY "Only admins can manage jobs" 
ON jobs FOR ALL 
USING (auth.jwt() ->> 'role' = 'admin');
```

## 4. Core Features

### Public Features (No Auth Required)

1. **Job Browsing**
- Search and filter jobs
- View job details
- Browse by categories
- Sort by date, salary, location
1. **Job Application**
- Dynamic application forms
- Resume upload
- Cover letter submission
- Email notifications

### Authenticated User Features

1. **Candidate Dashboard**
- Application history
- Saved jobs
- Profile management
- Application status tracking
1. **Admin/HR Dashboard**
- Job posting and management
- Application review
- Form builder for custom applications
- Analytics and reporting

### Advanced Features

1. **Smart Matching** (Future)
- Skill-based job recommendations
- Candidate scoring
- Auto-screening based on requirements
1. **Integration Capabilities**
- ATS integration
- Email automation
- Calendar scheduling for interviews
- Background check services

## 5. Technical Stack

### Frontend

- **Framework**: Next.js 14 with App Router
- **UI Library**: Tailwind CSS + Headless UI
- **State Management**: Zustand or Redux Toolkit
- **Form Handling**: React Hook Form + Zod validation
- **File Upload**: react-dropzone + Supabase Storage

### Backend

- **Database**: Supabase PostgreSQL
- **Authentication**: Supabase Auth
- **File Storage**: Supabase Storage
- **API**: Next.js API Routes
- **Email**: Resend or SendGrid

### DevOps & Deployment

- **Hosting**: Vercel or Netlify
- **CDN**: Built-in with hosting provider
- **Monitoring**: Vercel Analytics + Sentry
- **CI/CD**: GitHub Actions

## 6. Security Considerations

### Authentication & Authorization

- JWT-based authentication via Supabase
- Role-based access control
- Row-level security policies
- API rate limiting

### Data Protection

- Input validation and sanitization
- SQL injection prevention (via Supabase ORM)
- XSS protection
- CSRF protection
- File upload restrictions

### Privacy Compliance

- GDPR-compliant data handling
- Data retention policies
- Right to be forgotten implementation
- Consent management

## 7. Performance Optimization

### Frontend

- Server-side rendering (SSR)
- Image optimization
- Code splitting
- Lazy loading
- Progressive Web App features

### Backend

- Database indexing strategy
- Query optimization
- Caching layers (Redis if needed)
- CDN for static assets

### SEO Optimization

- Dynamic meta tags for job listings
- Structured data markup (JSON-LD)
- Sitemap generation
- Clean URLs with job slugs

## 8. Analytics & Monitoring

### Key Metrics

- Job view counts
- Application conversion rates
- Time-to-hire
- Source tracking
- User engagement metrics

### Tools

- Google Analytics 4
- Supabase Analytics
- Custom dashboard for HR metrics
- Error tracking with Sentry

## 9. Deployment Strategy

### Environment Setup

```
Development → Staging → Production
```

### Database Migrations

- Version-controlled schema changes
- Safe migration practices
- Rollback strategies

### Content Delivery

- Global CDN deployment
- Edge function optimization
- Static asset optimization

## 10. Future Enhancements

### Phase 2 Features

- Video interviews integration
- AI-powered resume screening
- Automated email sequences
- Advanced analytics dashboard

### Phase 3 Features

- Mobile app (React Native)
- API for third-party integrations
- White-label solution
- Multi-language support

## 11. Development Timeline

### Phase 1 (4-6 weeks) - MVP

- Basic job listing and application
- Admin panel for job management
- User authentication
- File upload functionality

### Phase 2 (3-4 weeks) - Enhanced Features

- Dynamic form builder
- Advanced search and filters
- Email notifications
- Analytics dashboard

### Phase 3 (2-3 weeks) - Polish & Launch

- Performance optimization
- Security audit
- UI/UX refinements
- Testing and QA

This architecture provides a solid foundation for a scalable, maintainable job portal that can grow with your company’s hiring needs while providing an excellent user experience for both candidates and hiring managers.